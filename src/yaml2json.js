import fs from 'fs';
import {dirname} from 'path';

import _ from 'lodash';
import commandLineArgs from 'command-line-args';

import {loadReportFromFile, loadReportFromYAML} from './util';

import {spdxLicenseList} from './spdx-list';

const groupDependencies = dependencies =>
    _.chain(dependencies)
        .reduce((result, {spdx = false, licenses, name, url}) => {
            let licenseUrl;
            let licenseName;

            if (!spdx || _.startsWith(spdx, '(')) {
                licenseName = _.first(licenses).name;
                licenseUrl = _.first(licenses).url;
            } else if (_.startsWith(spdx, '(')) {
                licenseName = spdx;
                licenseUrl = _.first(licenses).url;
            } else {
                licenseName = _.find(spdxLicenseList, {licenseId: spdx}).name;
                licenseUrl = `https://spdx.org/licenses/${spdx}.html`;
            }

            if (!_.has(result, licenseName)) {
                // eslint-disable-next-line
                result[licenseName] = {
                    name: licenseName,
                    url: licenseUrl,
                    pkgs: [],
                };
            }

            let pkgs = _.get(result, [licenseName, 'pkgs']);

            pkgs = _.chain(pkgs)
                .concat({name, url})
                .sortBy('name')
                .uniqBy('name')
                .value();

            _.set(result, [licenseName, 'pkgs'], pkgs);

            return result;
        }, {})
        .values()
        .sortBy(['name'])
        .value();

export const yaml2json = yamlString => {
    let {dependencies} = loadReportFromYAML(yamlString);
    dependencies = groupDependencies(dependencies);
    return JSON.stringify(dependencies);
};

export default argv => {
    const args = [
        {name: 'help', alias: 'h', description: 'Print help', type: Boolean},
        {
            name: 'inputFile',
            type: String,
            alias: 'i',
            typeLabel: 'file',
            defaultValue: false,
            defaultOption: true,
            description:
                'Input file (YAML format, generated by `license-checker report`)',
        },
        {
            name: 'outputFile',
            type: String,
            alias: 'o',
            typeLabel: 'file',
            defaultValue: false,
            description: 'Output file (YAML format, does not need to exist)',
        },
    ];

    const options = commandLineArgs(args, {argv});

    if (options.help) {
        const getUsage = require('command-line-usage');

        const sections = [
            {
                header: 'Eccenca License Checker (yaml2json)',
                content:
                    'Convert a yaml report into a json report grouped by license.',
            },
            {
                header: 'Synopsis',
                content: [
                    '$ license-checker yaml2json [--help] [--output=<path>] [--input] <path>',
                ],
            },
            {
                header: 'Options',
                optionList: args,
            },
        ];

        console.log(getUsage(sections));
    } else {
        let {dependencies} = loadReportFromFile(options.inputFile);

        dependencies = groupDependencies(dependencies);

        dependencies = JSON.stringify(dependencies);

        if (options.outputFile) {
            const mkdirp = require('mkdirp');

            const dir = dirname(options.outputFile);
            mkdirp.sync(dir);

            fs.writeFileSync(options.outputFile, dependencies, 'utf8');
        } else {
            console.log(dependencies);
        }
    }
};
