'use strict';

exports.__esModule = true;
exports.yaml2json = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _commandLineArgs = require('command-line-args');

var _commandLineArgs2 = _interopRequireDefault(_commandLineArgs);

var _util = require('./util');

var _spdxList = require('./spdx-list');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var groupDependencies = function groupDependencies(dependencies) {
    return _lodash2.default.chain(dependencies).reduce(function (result, _ref) {
        var _ref$spdx = _ref.spdx,
            spdx = _ref$spdx === undefined ? false : _ref$spdx,
            licenses = _ref.licenses,
            name = _ref.name,
            url = _ref.url;

        var licenseUrl = void 0;
        var licenseName = void 0;

        if (!spdx || _lodash2.default.startsWith(spdx, '(')) {
            licenseName = _lodash2.default.first(licenses).name;
            licenseUrl = _lodash2.default.first(licenses).url;
        } else if (_lodash2.default.startsWith(spdx, '(')) {
            licenseName = spdx;
            licenseUrl = _lodash2.default.first(licenses).url;
        } else {
            licenseName = _lodash2.default.find(_spdxList.spdxLicenseList, { licenseId: spdx }).name;
            licenseUrl = 'https://spdx.org/licenses/' + spdx + '.html';
        }

        if (!_lodash2.default.has(result, licenseName)) {
            // eslint-disable-next-line
            result[licenseName] = {
                name: licenseName,
                url: licenseUrl,
                pkgs: []
            };
        }

        var pkgs = _lodash2.default.get(result, [licenseName, 'pkgs']);

        pkgs = _lodash2.default.chain(pkgs).concat({ name: name, url: url }).sortBy('name').uniqBy('name').value();

        _lodash2.default.set(result, [licenseName, 'pkgs'], pkgs);

        return result;
    }, {}).values().sortBy(['name']).value();
};

var yaml2json = exports.yaml2json = function yaml2json(yamlString) {
    var _loadReportFromYAML = (0, _util.loadReportFromYAML)(yamlString),
        dependencies = _loadReportFromYAML.dependencies;

    dependencies = groupDependencies(dependencies);
    return JSON.stringify(dependencies);
};

exports.default = function (argv) {
    var args = [{ name: 'help', alias: 'h', description: 'Print help', type: Boolean }, {
        name: 'inputFile',
        type: String,
        alias: 'i',
        typeLabel: 'file',
        defaultValue: false,
        defaultOption: true,
        description: 'Input file (YAML format, generated by `license-checker report`)'
    }, {
        name: 'outputFile',
        type: String,
        alias: 'o',
        typeLabel: 'file',
        defaultValue: false,
        description: 'Output file (YAML format, does not need to exist)'
    }];

    var options = (0, _commandLineArgs2.default)(args, { argv: argv });

    if (options.help) {
        var getUsage = require('command-line-usage');

        var sections = [{
            header: 'Eccenca License Checker (yaml2json)',
            content: 'Convert a yaml report into a json report grouped by license.'
        }, {
            header: 'Synopsis',
            content: ['$ license-checker yaml2json [--help] [--output=<path>] [--input] <path>']
        }, {
            header: 'Options',
            optionList: args
        }];

        console.log(getUsage(sections));
    } else {
        var _loadReportFromFile = (0, _util.loadReportFromFile)(options.inputFile),
            dependencies = _loadReportFromFile.dependencies;

        dependencies = groupDependencies(dependencies);

        dependencies = JSON.stringify(dependencies);

        if (options.outputFile) {
            var mkdirp = require('mkdirp');

            var dir = (0, _path.dirname)(options.outputFile);
            mkdirp.sync(dir);

            _fs2.default.writeFileSync(options.outputFile, dependencies, 'utf8');
        } else {
            console.log(dependencies);
        }
    }
};