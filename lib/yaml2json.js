import fs from 'fs';
import {join, dirname} from 'path';

import _ from 'lodash';
import commandLineArgs from 'command-line-args';

import {loadReport} from './util';

import {spdxLicenseList} from './spdx-list';

export const yaml2json = (dependencies) => {

    return _.chain(dependencies)
        .reduce((result, {spdx = 'xCUSTOMx', licenses, name, url}) => {

            if (!_.has(result, spdx)) {

                let licenseUrl, licenseName;

                if (spdx === 'xCUSTOMx' || _.startsWith(spdx, '(')) {
                    licenseUrl = _.first(licenses).url;
                    licenseName = _.first(licenses).name;
                    spdx = licenseName;
                } else {
                    const spdxLicense = _.find(spdxLicenseList, {licenseId: spdx});
                    licenseUrl = `https://spdx.org/licenses/${spdx}.html`;
                    licenseName = spdxLicense.name;
                }

                result[spdx] = {
                    name: licenseName,
                    url: licenseUrl,
                    pkgs: []
                }
            }

            let pkgs = _.get(result, [spdx, 'pkgs']);

            pkgs = _.chain(pkgs)
                .concat({name, url})
                .sortBy('name')
                .uniqBy('name')
                .value();

            _.set(result, [spdx, 'pkgs'], pkgs);

            return result;

        }, {})
        .values()
        .sortBy(['name'])
        .value();
};

export default (argv) => {

    var cli = commandLineArgs([
        {
            name: 'inputFile',
            type: String,
            alias: 'i',
            typeLabel: 'file',
            defaultValue: false,
            defaultOption: true,
            description: 'Input file (YAML format, generated by `license-checker report`)'
        },
        {
            name: 'outputFile',
            type: String,
            alias: 'o',
            typeLabel: 'file',
            defaultValue: false,
            description: 'Output file (YAML format, does not need to exist)'
        },
        {name: 'help', alias: 'h', description: 'Print help', type: Boolean}
    ]);

    var options = cli.parse(argv);

    if (options.help) {

        var help = {
            title: 'Eccenca License Checker (yaml2json)',
            description: 'Convert a yaml report into a json report grouped by license.',
            synopsis: [
                '$ license-checker yaml2json [--help] [--output=<path>] [--input] <path>'
            ]
        };

        console.log(cli.getUsage(help));
    } else {

        let {dependencies} = loadReport(options.inputFile);

        dependencies = yaml2json(dependencies);

        dependencies = JSON.stringify(dependencies);

        if (options.outputFile) {
            var path = require('path');
            var mkdirp = require('mkdirp');

            var dir = dirname(options.outputFile);
            mkdirp.sync(dir);
            //Remove the color tags

            fs.writeFileSync(options.outputFile, dependencies, 'utf8');
        } else {
            console.log(dependencies);
        }


    }
}